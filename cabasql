
UPDATE hab2020  
SET FechaHabilitacion = STR_TO_DATE(FechaHabilitacion, '%m/%d/%Y');

UPDATE hab2021 
SET FechaHabilitacion = STR_TO_DATE(FechaHabilitacion, '%m/%d/%Y');

UPDATE hab19 
SET Fecha_Habilitacion = STR_TO_DATE(Fecha_Habilitacion, '%m/%d/%Y');

UPDATE hab17a18
SET Fecha_Habilitacion = STR_TO_DATE(Fecha_Habilitacion, '%m/%d/%Y');

# En una base de datos ajena hubiera creado una tabla temporal o un CTE pero aca la queria limpiar permanentemente en la base de datos local.

UPDATE `Estimacion Poblacional Ambos`
SET 
    `1` = ROUND(`1`*1000, 0),
    `2` = ROUND(`2`*1000, 0),
    `3` = ROUND(`3`*1000, 0),
    `4` = ROUND(`4`*1000, 0),
    `5` = ROUND(`5`*1000, 0),
    `6` = ROUND(`6`*1000, 0),
    `7` = ROUND(`7`*1000, 0),
    `8` = ROUND(`8`*1000, 0),
    `9` = ROUND(`9`*1000, 0), 
    `10` = ROUND(`10`*1000, 0), 
    `11` = ROUND(`11`*1000, 0), 
    `12` = ROUND(`12`*1000, 0), 
    `13` = ROUND(`13`*1000, 0), 
    `14` = ROUND(`14`*1000, 0), 
    `15` = ROUND(`15`*1000, 0) 
;

UPDATE `Estimacion Poblacional Hombres`
SET 
    `1` = ROUND(`1`*1000, 0),
    `2` = ROUND(`2`*1000, 0),
    `3` = ROUND(`3`*1000, 0),
    `4` = ROUND(`4`*1000, 0),
    `5` = ROUND(`5`*1000, 0),
    `6` = ROUND(`6`*1000, 0),
    `7` = ROUND(`7`*1000, 0),
    `8` = ROUND(`8`*1000, 0),
    `9` = ROUND(`9`*1000, 0), 
    `10` = ROUND(`10`*1000, 0), 
    `11` = ROUND(`11`*1000, 0), 
    `12` = ROUND(`12`*1000, 0), 
    `13` = ROUND(`13`*1000, 0), 
    `14` = ROUND(`14`*1000, 0), 
    `15` = ROUND(`15`*1000, 0) 
;

UPDATE `Estimacion Poblacional Mujeres`
SET 
    `1` = ROUND(`1`*1000, 0),
    `2` = ROUND(`2`*1000, 0),
    `3` = ROUND(`3`*1000, 0),
    `4` = ROUND(`4`*1000, 0),
    `5` = ROUND(`5`*1000, 0),
    `6` = ROUND(`6`*1000, 0),
    `7` = ROUND(`7`*1000, 0),
    `8` = ROUND(`8`*1000, 0),
    `9` = ROUND(`9`*1000, 0), 
    `10` = ROUND(`10`*1000, 0), 
    `11` = ROUND(`11`*1000, 0), 
    `12` = ROUND(`12`*1000, 0), 
    `13` = ROUND(`13`*1000, 0), 
    `14` = ROUND(`14`*1000, 0), 
    `15` = ROUND(`15`*1000, 0) 

;

ALTER TABLE hab2021 ADD Seccion INT NULL;

#-------------------
DROP TABLE IF EXISTS habs;
CREATE TEMPORARY TABLE habs
SELECT * 
FROM ( SELECT 
         fecha_habilitacion, 
         descripcion_rubro, 
         Seccion 
       FROM hab17a18 AS hab17a18
       UNION
       SELECT 
         fecha_habilitacion, 
         descripcion_rubro, 
         Seccion 
       FROM hab19 AS hab17a19
       UNION
       SELECT 
         FechaHabilitacion AS fecha_habilitacion, 
         DescripcionRubro AS descripcion_rubro, 
         Seccion FROM hab2020 AS hab17a20
       UNION
       SELECT 
         FechaHabilitacion AS fecha_habilitacion, 
         DescripcionRubro AS descripcion_rubro, 
         Seccion FROM hab2021 AS hab17a21) AS habis;

DROP TABLE IF EXISTS salario;
CREATE TEMPORARY TABLE salario
SELECT *
FROM `Salario Promedio`
WHERE zona_prov = "CAPITAL FEDERAL"
ORDER BY fecha DESC;


CREATE TABLE Alquileres
SELECT Año, Mes, Ambientes, Belgrano, Caballito, Palermo, Recoleta
FROM Alquiler;

update Alquileres
SET 
    `Belgrano` = ROUND(`Belgrano`*1000, 0),
    `Caballito` = ROUND(`Caballito`*1000, 0),
    `Palermo` = ROUND(`Palermo`*1000, 0),
    `Recoleta` = ROUND(`Recoleta`*1000, 0)
;


# Años con mas hbailitacioens comerciales

SELECT YEAR(fecha_habilitacion) AS Año, COUNT(descripcion_rubro) AS Cantidad
FROM habs
GROUP BY YEAR(fecha_habilitacion)
ORDER BY cantidad DESC;

# Mes con mas habilitacioens comerciales

SELECT MONTH(fecha_habilitacion) AS mes, COUNT(descripcion_rubro) AS Cantidad
FROM habs
GROUP BY MONTH(fecha_habilitacion)
ORDER BY cantidad DESC;

# Secciones con mas con mas hbailitaciones comerciales desde 2017 hasta fines de 2021.

SELECT Seccion, COUNT(Seccion) AS total
FROM habs
GROUP BY Seccion
ORDER BY total DESC
LIMIT 10;


# 10 tipos de rubros con mas hbailitaciones comerciales desde 2017 hasta fines de 2021.

SELECT descripcion_rubro, COUNT(descripcion_rubro) AS total
FROM habs
GROUP BY descripcion_rubro
ORDER BY total DESC
LIMIT 10;

# Cantidad de habilitaciones por seccion de Comercios minoristas de bebidas en general envasadas.

SELECT DISTINCT Seccion, total
FROM( SELECT 
         descripcion_rubro, 
         Seccion, 
         count(Seccion) OVER(PARTITION BY Seccion ORDER BY Seccion DESC) AS total
      FROM habs
      WHERE descripcion_rubro = "COM.MIN.DE BEBIDAS EN GENERAL ENVASADAS"
      ORDER BY total desc) AS der
;

# Cantidad de habilitaciones por seccion de COM.MIN.DE ARTIC. PERSONALES Y PARA REGALOS.

SELECT DISTINCT Seccion, total
FROM( SELECT 
         descripcion_rubro, 
         Seccion, 
         count(Seccion) OVER(PARTITION BY Seccion ORDER BY Seccion DESC) AS total
      FROM habs
      where descripcion_rubro = "COM.MIN.DE ARTIC. PERSONALES Y PARA REGALOS"
      ORDER BY total desc) AS der
;

# Cantidad de habilitaciones por seccion de COM.MIN.DE ROPA CONFECCION., LENCERIA, BLANCO,MANTEL.TEXT. EN GRAL.Y PIELES.

SELECT DISTINCT Seccion, total
FROM( SELECT 
         descripcion_rubro, 
         Seccion, 
         count(Seccion) OVER(PARTITION BY Seccion ORDER BY Seccion DESC) AS total
      FROM habs
      where descripcion_rubro = "COM.MIN.DE ROPA CONFECCION., LENCERIA, BLANCO,MANTEL.TEXT. EN GRAL.Y PIELES"
      ORDER BY total desc) AS der
;

#---------------


SELECT fecha_habilitacion, Habilitaciones,
ROUND((Habilitaciones - HabilitacionesRT) / HabilitacionesRT, 2) AS crecimiento
FROM (SELECT fecha_habilitacion, Habilitaciones,
COALESCE (LAG(Habilitaciones) OVER (ORDER BY fecha_habilitacion ASC), 1) AS HabilitacionesRT
FROM (SELECT  
       DATE_FORMAT(primerahab,'%Y-%m') AS fecha_habilitacion,
       count(DISTINCT descripcion_rubro) AS Habilitaciones
      FROM (SELECT 
             descripcion_rubro, 
             MIN(fecha_habilitacion) AS primerahab
            FROM habs
            GROUP BY descripcion_rubro) AS dg
      GROUP BY fecha_habilitacion
      ORDER BY fecha_habilitacion) AS dgs
ORDER BY fecha_habilitacion ASC) AS dgba
;

;
